// Given an m x n matrix, return all elements of the matrix in spiral order.

// Input: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
// Output: [1, 2, 3, 6, 9, 8, 7, 4, 5]


// Input: matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
// Output: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]

var spiralOrder = function (matrix) {
    if (matrix.length === 0 || !matrix || matrix.length === 1) {
        return matrix[0];
    }
    let results = [];
    let record = new Map();
    let dir = [[0, 1], [1, 0], [0, -1], [-1, 0]];
    let dirInd = 0;
    let curr = [0, 0];
    while (1 === 1) {
        let currDir = dir[dirInd];
        let xChange = currDir[0];
        let yChange = currDir[1];
        x = curr[0];
        y = curr[1];
        if (matrix[x][y] || matrix[x][y] === 0) {
            results.push(matrix[x][y]);
        }
        record.set(`${x}_${y}`);

        if (matrix[x + xChange]
            && (matrix[x + xChange][y + yChange] || matrix[x + xChange][y + yChange] === 0)
            && !record.has(`${x + xChange}_${y + yChange}`)) {
            curr = [x + xChange, y + yChange]
            continue;
        } else {
            if (dirInd === 3) {
                dirInd = 0;
            } else {
                dirInd++;
            }
            currDir = dir[dirInd];
            xChange = currDir[0];
            yChange = currDir[1];
            if (record.has(`${x + xChange}_${y + yChange}`)) {
                return results;
            } else {
                curr = [x + xChange, y + yChange]
            }
        }
    }
}







var maximalSquare = function (matrix) {


    let squareFind = function (point, size, max) {
        let dir = [[0, 1], [1, 0], [0, -1], [-1, 0]]
        let z = 0;
        let x = point[0];
        let y = point[1];
        if (max === 1) {
            if (matrix[x + 1] && matrix[x + 1][y] === '1'
                && matrix[x][y + 1] === '1'
                && matrix[x + 1][y + 1] === '1') {
                if (matrix[x - 1] && matrix[x - 1][y - 1]) {
                    squareFind([[x - 1], [y - 1]], 0, 4)
                } else {
                    return 4;
                }
            }
        } else {
            size = size + 2;
            let point2 = [x, y + size];
            let point3 = [x + size, y + size];
            let point4 = [x + size, y];
            let corners = [point, point2, point3, point4];
            for (let i = 0; i < corners.length; i++) {
                let start = corners[i];
                let currDir = dir[z]
                x = start[0];
                y = start[1];
                for (let j = 0; j < size; j++) {
                    if (matrix[x][y] !== '1') {
                        return max;
                    } else {
                        x = x + currDir[0];
                        y = y + currDir[1];
                    }
                }
                z++;
            }
            if (matrix[x - 1] && matrix[x - 1][y - 1]) {
                squareFind([[x - 1], [y - 1]], size,)
            } else {
                return max
            }
        }
    }
    let max = 0;
    for (let k = 0; k < matrix.length; k++) {
        for (let l = 0; l < matrix[k].length; l++) {
            if (matrix[k][l] === '1') {
                if (matrix[k][l] === '1') {
                    console.log("hi");
                }
                max = Math.max(1, squareFind([k, l], 1, 1))
            }
        }
    }
    return 0;
};